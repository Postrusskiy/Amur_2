// Copyright 2025 Andrew Laptev. All Rights Reserved.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

#define DEFAULT_GROUP_SIZE 16
#define GROUP_SIZE (DEFAULT_GROUP_SIZE)

// Viewport size
uint4 ViewportRect; // declared in PostProcessCommon.ush

// This is the UV for Viewport
float2 ViewportInvSize;

// This is the multiplier to scale Viewport UV (0..1) to current SceneColor RT
float2 UVScale;

Texture2D InputTexture;
Texture2D PreviousTexture;
Texture2D VelocityTexture;
Texture2D DepthTexture;

SamplerState InputSampler;

float DatamoshFactor;
float DatamoshTrailFactor;
int DatamoshNoise;
float DatamoshNoiseIntensity;
float DatamoshNoiseSize;
float2 DatamoshMotion;
int DatamoshStyle;
int DatamoshTrail;
float DatamoshStyleIntensity;
float DatamoshVelocityCompensation;
float DatamoshSharpness;

float DatamoshDebugFloat;

float2 VelocityLookup(float Depth, float2 UV, float4 EncodedVelocity, float VelocityCompensation)
{
    float2 Velocity;
    if (saturate(EncodedVelocity.y - VelocityCompensation) > 0)
    {
        Velocity = DecodeVelocityFromTexture(EncodedVelocity).xy;
    }
    else
    {
        float4 ThisClip = float4(UV, Depth, 1);
        float4 PrevClip = mul(ThisClip, View.ClipToPrevClip);
        float2 PrevScreen = PrevClip.xy / PrevClip.w;
        Velocity = UV - PrevScreen;
    }
    return Velocity;
}

float SelectStyle(float ProcessedVel)
{
    float OutputValue;

    switch (DatamoshStyle)
    {
        case 1:
            if (DatamoshNoise == 0)
            {
                OutputValue = DatamoshFactor;
            }
            else
            {
                OutputValue = saturate(ProcessedVel + DatamoshStyleIntensity);
            }
            break;
        default:
            OutputValue = DatamoshFactor;
            break;
    }
    return OutputValue;
}

float GenericNoise(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

float3 permute(float3 x)
{
    return fmod(((x * 34.0) + 1.0) * x, 289.0);
}

float simplex2dnoise(float2 uv)
{
    const float4 C = float4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    float2 i = floor(uv + dot(uv, C.yy));
    float2 x0 = uv - i + dot(i, C.xx);
    float2 i1;
    i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
    float4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = fmod(i, 289.0);
    float3 p = permute(permute(i.y + float3(0.0, i1.y, 1.0)) + i.x + float3(0.0, i1.x, 1.0));
    float3 m = max(0.5 - float3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;
    float3 x = 2.0 * frac(p * C.www) - 1.0;
    float3 h = abs(x) - 0.5;
    float3 ox = floor(x + 0.5);
    float3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    float3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

// Generate noise based on the noise type and parameters
float GenerateNoise(float x, float y)
{
    float2 uv = float2(x, y);
    float noiseValue = 0.0;

    switch (DatamoshNoise)
    {
        case 1:
            noiseValue = DatamoshNoiseIntensity * GenericNoise(uv);
            break;
        case 2:
        {
                float2 p = floor(uv);
                float2 f = frac(uv);
                f = f * f * (3.0 - 2.0 * f);
                float2 v00 = GenericNoise(p);
                float2 v10 = GenericNoise(p + float2(1, 0));
                float2 v01 = GenericNoise(p + float2(0, 1));
                float2 v11 = GenericNoise(p + float2(1, 1));
                float2 i0 = lerp(v00, v10, f.x);
                float2 i1 = lerp(v01, v11, f.x);
                noiseValue = DatamoshNoiseIntensity * lerp(i0, i1, f.y);
                break;
            }
        case 3:
        {
                float2 p = frac(uv * 43758.5453);
                float2 f = float2(1.0, 0.7);
                noiseValue = 0.0;
                noiseValue += sin(dot(p, f)) * 0.5 + 0.5;
                noiseValue += sin(dot(p * 2.0, f * 2.0)) * 0.25 + 0.25;
                noiseValue += sin(dot(p * 3.0, f * 3.0)) * 0.125 + 0.125;
                noiseValue *= DatamoshNoiseIntensity;
                break;
            }
        case 4:
        {
                noiseValue = DatamoshNoiseIntensity * simplex2dnoise(uv);
                break;
            }
        case 5:
        {
                noiseValue = DatamoshNoiseIntensity * simplex2dnoise(uv) * GenericNoise(uv);
                break;
            }
        default:
            noiseValue = 0;
            break;
    }
    return noiseValue;
}
